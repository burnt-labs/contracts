const fs = require('fs');
const path = require('path');

// Generate README
function generateReadme() {
    const contractsFile = path.join(__dirname, '../contracts.json');
    const readmePath = path.join(__dirname, '../README.md');

    const contractsData = JSON.parse(fs.readFileSync(contractsFile, 'utf8'));

    let readmeContent = `
<!-- AUTOGENERATED FILE DO NOT EDIT -->

# XION Mainnet Contracts

Contract information for XION mainnet

## Development

### Updating Documentation

The README is automatically generated from \`contracts.json\`. To update it:

1. Ensure you have Node.js installed: https://nodejs.org/

2. Modify \`contracts.json\` with your changes
   - The script will validate the JSON format and required fields
   - Each contract must include: name, description, code_id, hash, release info, and author details

3. Run the convert script:
\`\`\`bash
node scripts/convert.js
\`\`\`

4. Commit both the \`contracts.json\` and generated \`README.md\` changes
   - The CI will validate both files are in sync during pull requests
   - Pull requests with manual README edits will be rejected

### Compiling

\`\`\`bash

docker run --rm -v "\$(pwd)":/code \\
  --mount type=volume,source="\$(basename "\$(pwd)")_cache",target=/target \\
  --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \\
  cosmwasm/optimizer:0.16.1

\`\`\`

## Active Contracts
| Name | Description | Release | Author | Code ID | Code ID (Testnet) | Hash | Governance Proposal |
|:-----|:------------|:--------|:-------|:--------|:------------------|:-----|:-------------------|
`;

    contractsData.forEach(contract => {
        if (!contract.deprecated) {
            const testnetCodeId = contract.testnet ? `\`${contract.testnet.code_id}\`` : '-';
            readmeContent += `| ${contract.name} | ${contract.description || ""} | ${contract.release ? `[${contract.release.version}](${contract.release.url})` : ""} | ${contract.author ? `[${contract.author.name}](${contract.author.url})` : ""} | \`${contract.code_id || ""}\` | ${testnetCodeId} | \`${contract.hash}\` | ${contract.governance || ""} |\n`;
        }
    });

    readmeContent += `

## Deprecated Contracts
| Name | Description | Release | Author | Code ID | Code ID (Testnet) | Hash | Governance Proposal |
|:-----|:------------|:--------|:-------|:--------|:------------------|:-----|:-------------------|
`;

    contractsData.forEach(contract => {
        if (contract.deprecated) {
            const testnetCodeId = contract.testnet ? `\`${contract.testnet.code_id}\`` : '-';
            readmeContent += `| ${contract.name} | ${contract.description || ""} | ${contract.release ? `[${contract.release.version}](${contract.release.url})` : ""} | ${contract.author ? `[${contract.author.name}](${contract.author.url})` : ""} | \`${contract.code_id || ""}\` | ${testnetCodeId} | \`${contract.hash}\` | ${contract.governance || ""} |\n`;
        }
    });

    readmeContent += `

## Utilities

### Code ID Verification

The repository includes a utility to verify that the code IDs and their corresponding hashes in the local \`contracts.json\` file match those deployed on the Xion mainnet.

#### Prerequisites
- Node.js 18 or higher: https://nodejs.org/

#### Usage
To verify code IDs:
\`\`\`bash
node scripts/verify-contracts.js
\`\`\`

The utility will:
1. Read the local contracts.json file
2. Fetch current contract data from Xion mainnet
3. Compare code IDs and hashes
4. Report any mismatches or discrepancies

This helps ensure that the contract information in this repository accurately reflects what's deployed on the Xion mainnet.
`;

    fs.writeFileSync(readmePath, readmeContent);
    console.log('README.md has been generated successfully.');
}

// Main execution
generateReadme(); 