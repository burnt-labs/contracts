#[cfg(not(feature = "library"))]
mod contract;
mod error;
pub mod msg;
mod query;

#[cfg(test)]
mod tests {
    use cosmwasm_std::{Binary, BlockInfo, Response, Timestamp};
    use cw_orch::core::CwEnvError;
    use super::*;
    use cw_orch::interface;
    use cw_orch::prelude::*;
    use crate::msg::{InstantiateMsg, QueryMsg, VerifyAttestation};
    use base64::prelude::*;

    #[interface(InstantiateMsg, Empty, QueryMsg, Empty)]
    pub struct IOSAppAttestVerifier;

    impl <Chain> Uploadable for IOSAppAttestVerifier<Chain> {
        fn wrapper() -> Box<dyn MockContract<Empty>> {
            Box::new(
                ContractWrapper::new_with_empty(
                    contract::execute,
                    contract::instantiate,
                    contract::query,
                )
            )
        }
    }

    #[test]
    fn test_verification() {
        let sender = Addr::unchecked("sender");
        // Create a new mock chain (backed by cw-multi-test)
        let chain = Mock::new_with_chain_id(&sender, "xion_testnet");
        chain.app.borrow_mut().set_block(BlockInfo{
            height: 12345,
            time: Timestamp::from_seconds(1754421147),
            chain_id: "xion_testnet".to_string(),
        });

        let app_attest_verifier_base: IOSAppAttestVerifier<Mock> = IOSAppAttestVerifier::new("ios_app_attest", chain);
        app_attest_verifier_base.upload().unwrap();

        let app_attest_init_msg = InstantiateMsg{};
        app_attest_verifier_base.instantiate(&app_attest_init_msg, None, &[]).unwrap();

        let app_id = "85A34A7PB2.com.burnt.integrityexample";
        let challenge_str = "serverAttestationChallenge";
        let key_id_str = "0ylZlqlzgHoapVpTd5ZbO9dUGIUe0GBLMHuSCW5IPOI=";
        let cbor_str = "o2NmbXRvYXBwbGUtYXBwYXR0ZXN0Z2F0dFN0bXSiY3g1Y4JZA7wwggO4MIIDPqADAgECAgYBmHwYGc0wCgYIKoZIzj0EAwIwTzEjMCEGA1UEAwwaQXBwbGUgQXBwIEF0dGVzdGF0aW9uIENBIDExEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwHhcNMjUwODA0MjExNjUxWhcNMjYwNTA5MDAwNzUxWjCBkTFJMEcGA1UEAwxAZDMyOTU5OTZhOTczODA3YTFhYTU1YTUzNzc5NjViM2JkNzU0MTg4NTFlZDA2MDRiMzA3YjkyMDk2ZTQ4M2NlMjEaMBgGA1UECwwRQUFBIENlcnRpZmljYXRpb24xEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAS/q3qW1PnU0+LGCpoNPKMdSBcqF2S0toJsh1hrXi/0FwRcDibnqB+fAkvBAQ6iSn6XTZRXrMKRdSRtJGhTjqhqo4IBwTCCAb0wDAYDVR0TAQH/BAIwADAOBgNVHQ8BAf8EBAMCBPAwgZcGCSqGSIb3Y2QIBQSBiTCBhqQDAgEKv4kwAwIBAb+JMQMCAQC/iTIDAgEBv4kzAwIBAb+JNCcEJTg1QTM0QTdQQjIuY29tLmJ1cm50LmludGVncml0eWV4YW1wbGWlBgQEc2tzIL+JNgMCAQW/iTcDAgEAv4k5AwIBAL+JOgMCAQC/iTsDAgEAqgMCAQC/iTwGAgRza3MgMIHNBgkqhkiG92NkCAcEgb8wgby/ingGBAQxOC41v4hQAwIBAr+KeQkEBzEuMC4xNjW/insHBAUyMkY3Nr+KfAYEBDE4LjW/in0GBAQxOC41v4p+AwIBAL+KfwMCAQC/iwADAgEAv4sBAwIBAL+LAgMCAQC/iwMDAgEAv4sEAwIBAb+LBQMCAQC/iwoPBA0yMi42Ljc2LjAuMCwwv4sLDwQNMjIuNi43Ni4wLjAsML+LDA8EDTIyLjYuNzYuMC4wLDC/iAIKBAhpcGhvbmVvczAzBgkqhkiG92NkCAIEJjAkoSIEILpPrryB5kHfz2aSOy7D/0Wi62wXt+JBBg9bRW2YCTPHMAoGCCqGSM49BAMCA2gAMGUCMCEBMLZNoNRGtYiLMmRR2jf8F+q629C8QRoIOuIwO2U+PfLgK6ERTvYmZZzBwvJhyQIxANoznlGVM6U56uavsFYvfzocJ6WyFTwAKZNMWZEF4yGNdyYxZSeyXF8hRyXmYPUEB1kCRzCCAkMwggHIoAMCAQICEAm6xeG8QBrZ1FOVvDgaCFQwCgYIKoZIzj0EAwMwUjEmMCQGA1UEAwwdQXBwbGUgQXBwIEF0dGVzdGF0aW9uIFJvb3QgQ0ExEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwHhcNMjAwMzE4MTgzOTU1WhcNMzAwMzEzMDAwMDAwWjBPMSMwIQYDVQQDDBpBcHBsZSBBcHAgQXR0ZXN0YXRpb24gQ0EgMTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTB2MBAGByqGSM49AgEGBSuBBAAiA2IABK5bN6B3TXmyNY9A59HyJibxwl/vF4At6rOCalmHT/jSrRUleJqiZgQZEki2PLlnBp6Y02O9XjcPv6COMp6Ac6mF53Ruo1mi9m8p2zKvRV4hFljVZ6+eJn6yYU3CGmbOmaNmMGQwEgYDVR0TAQH/BAgwBgEB/wIBADAfBgNVHSMEGDAWgBSskRBTM72+aEH/pwyp5frq5eWKoTAdBgNVHQ4EFgQUPuNdHAQZqcm0MfiEdNbh4Vdy45swDgYDVR0PAQH/BAQDAgEGMAoGCCqGSM49BAMDA2kAMGYCMQC7voiNc40FAs+8/WZtCVdQNbzWhyw/hDBJJint0fkU6HmZHJrota7406hUM/e2DQYCMQCrOO3QzIHtAKRSw7pE+ZNjZVP+zCl/LrTfn16+WkrKtplcS4IN+QQ4b3gHu1iUObdncmVjZWlwdFkPMjCABgkqhkiG9w0BBwKggDCAAgEBMQ8wDQYJYIZIAWUDBAIBBQAwgAYJKoZIhvcNAQcBoIAkgASCA+gxggToMC0CAQICAQEEJTg1QTM0QTdQQjIuY29tLmJ1cm50LmludGVncml0eWV4YW1wbGUwggPGAgEDAgEBBIIDvDCCA7gwggM+oAMCAQICBgGYfBgZzTAKBggqhkjOPQQDAjBPMSMwIQYDVQQDDBpBcHBsZSBBcHAgQXR0ZXN0YXRpb24gQ0EgMTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTAeFw0yNTA4MDQyMTE2NTFaFw0yNjA1MDkwMDA3NTFaMIGRMUkwRwYDVQQDDEBkMzI5NTk5NmE5NzM4MDdhMWFhNTVhNTM3Nzk2NWIzYmQ3NTQxODg1MWVkMDYwNGIzMDdiOTIwOTZlNDgzY2UyMRowGAYDVQQLDBFBQUEgQ2VydGlmaWNhdGlvbjETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABL+repbU+dTT4sYKmg08ox1IFyoXZLS2gmyHWGteL/QXBFwOJueoH58CS8EBDqJKfpdNlFeswpF1JG0kaFOOqGqjggHBMIIBvTAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIE8DCBlwYJKoZIhvdjZAgFBIGJMIGGpAMCAQq/iTADAgEBv4kxAwIBAL+JMgMCAQG/iTMDAgEBv4k0JwQlODVBMzRBN1BCMi5jb20uYnVybnQuaW50ZWdyaXR5ZXhhbXBsZaUGBARza3Mgv4k2AwIBBb+JNwMCAQC/iTkDAgEAv4k6AwIBAL+JOwMCAQCqAwIBAL+JPAYCBHNrcyAwgc0GCSqGSIb3Y2QIBwSBvzCBvL+KeAYEBDE4LjW/iFADAgECv4p5CQQHMS4wLjE2Nb+KewcEBTIyRjc2v4p8BgQEMTguNb+KfQYEBDE4LjW/in4DAgEAv4p/AwIBAL+LAAMCAQC/iwEDAgEAv4sCAwIBAL+LAwMCAQC/iwQDAgEBv4sFAwIBAL+LCg8EDTIyLjYuNzYuMC4wLDC/iwsPBA0yMi42Ljc2LjAuMCwwv4sMDwQNMjIuNi43Ni4wLjAsML+IAgoECGlwaG9uZW9zMDMGCSqGSIb3Y2QIAgQmMCShIgQguk+uvIHmQd/PZpI7LsP/RaLrbBe34kEGD1tFbZgJM8cwCgYIKoZIzj0EAwIDaAAwZQIwIQEwtk2g1Ea1iIsyZFHaN/wX6rrb0LxBGgg64jA7ZT498uAroRFO9iZlnMHC8mHJAjEA2jOeUZUzpTnq5q+wVi9/OhwnpbIVPAApk0xZBIIBBJEF4yGNdyYxZSeyXF8hRyXmYPUEBzAoAgEEAgEBBCD3I9pOnZpVvZS7GlPlqM2l+Eqe5Z0XpkLhzoVIXsAObjBgAgEFAgEBBFhyNXp2bzBnUGpTT0ZqTVIzMWFHT3NmTUdyeldKNG9HdC9QQzQ3T2phYSs2Y3dPSzNkQlhtc1BUaVdGSW1FOGt0NmczdkFBWlRhY08ra1hBZit5RjltQT09MA4CAQYCAQEEBkFUVEVTVDAPAgEHAgEBBAdzYW5kYm94MB8CAQwCAQEEFzIwMjUtMDgtMDVUMjE6MTY6NTEuMDZaMB8CARUCAQEEFzIwMjUtMTEtMDNUMjE6MTY6NTEuMDZaAAAAAAAAoIAwggOvMIIDVKADAgECAhBCBNMtTmPM37+D65ivVXYxMAoGCCqGSM49BAMCMHwxMDAuBgNVBAMMJ0FwcGxlIEFwcGxpY2F0aW9uIEludGVncmF0aW9uIENBIDUgLSBHMTEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMB4XDTI1MDEyMjE4MjYxMVoXDTI2MDIxNzE5NTYwNFowWjE2MDQGA1UEAwwtQXBwbGljYXRpb24gQXR0ZXN0YXRpb24gRnJhdWQgUmVjZWlwdCBTaWduaW5nMRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABJuGmJmX1OlG3Mu+RD8r9ykR00BrxC8fwiSrFQtF7pL6a9Ss9K0cHBGKTSTiPrdSgaJTiWG0KsOTiHuEH2MP7OOjggHYMIIB1DAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFNkX/ktnkDhLkvTbztVXgBQLjz3JMEMGCCsGAQUFBwEBBDcwNTAzBggrBgEFBQcwAYYnaHR0cDovL29jc3AuYXBwbGUuY29tL29jc3AwMy1hYWljYTVnMTAxMIIBHAYDVR0gBIIBEzCCAQ8wggELBgkqhkiG92NkBQEwgf0wgcMGCCsGAQUFBwICMIG2DIGzUmVsaWFuY2Ugb24gdGhpcyBjZXJ0aWZpY2F0ZSBieSBhbnkgcGFydHkgYXNzdW1lcyBhY2NlcHRhbmNlIG9mIHRoZSB0aGVuIGFwcGxpY2FibGUgc3RhbmRhcmQgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdXNlLCBjZXJ0aWZpY2F0ZSBwb2xpY3kgYW5kIGNlcnRpZmljYXRpb24gcHJhY3RpY2Ugc3RhdGVtZW50cy4wNQYIKwYBBQUHAgEWKWh0dHA6Ly93d3cuYXBwbGUuY29tL2NlcnRpZmljYXRlYXV0aG9yaXR5MB0GA1UdDgQWBBSbrrPFJWW8XMvY60qmR1GnKfDawjAOBgNVHQ8BAf8EBAMCB4AwDwYJKoZIhvdjZAwPBAIFADAKBggqhkjOPQQDAgNJADBGAiEA/lsJsgMpTepk85d+NDBRzDRTEblU78CoFeAFnkGcCTsCIQCOFA9A6Tf9h80SMXutbVhrIAAcrTRvuOcnh+aIsMYcgzCCAvkwggJ/oAMCAQICEFb7g9Qr/43DN5kjtVqubr0wCgYIKoZIzj0EAwMwZzEbMBkGA1UEAwwSQXBwbGUgUm9vdCBDQSAtIEczMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwHhcNMTkwMzIyMTc1MzMzWhcNMzQwMzIyMDAwMDAwWjB8MTAwLgYDVQQDDCdBcHBsZSBBcHBsaWNhdGlvbiBJbnRlZ3JhdGlvbiBDQSA1IC0gRzExJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABJLOY719hrGrKAo7HOGv+wSUgJGs9jHfpssoNW9ES+Eh5VfdEo2NuoJ8lb5J+r4zyq7NBBnxL0Ml+vS+s8uDfrqjgfcwgfQwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBS7sN6hWDOImqSKmd6+veuv2sskqzBGBggrBgEFBQcBAQQ6MDgwNgYIKwYBBQUHMAGGKmh0dHA6Ly9vY3NwLmFwcGxlLmNvbS9vY3NwMDMtYXBwbGVyb290Y2FnMzA3BgNVHR8EMDAuMCygKqAohiZodHRwOi8vY3JsLmFwcGxlLmNvbS9hcHBsZXJvb3RjYWczLmNybDAdBgNVHQ4EFgQU2Rf+S2eQOEuS9NvO1VeAFAuPPckwDgYDVR0PAQH/BAQDAgEGMBAGCiqGSIb3Y2QGAgMEAgUAMAoGCCqGSM49BAMDA2gAMGUCMQCNb6afoeDk7FtOc4qSfz14U5iP9NofWB7DdUr+OKhMKoMaGqoNpmRt4bmT6NFVTO0CMGc7LLTh6DcHd8vV7HaoGjpVOz81asjF5pKw4WG+gElp5F8rqWzhEQKqzGHZOLdzSjCCAkMwggHJoAMCAQICCC3F/IjSxUuVMAoGCCqGSM49BAMDMGcxGzAZBgNVBAMMEkFwcGxlIFJvb3QgQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMB4XDTE0MDQzMDE4MTkwNloXDTM5MDQzMDE4MTkwNlowZzEbMBkGA1UEAwwSQXBwbGUgUm9vdCBDQSAtIEczMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAASY6S89QHKk7ZMicoETHN0QlfHFo05x3BQW2Q7lpgUqd2R7X04407scRLV/9R+2MmJdyemEW08wTxFaAP1YWAyl9Q8sTQdHE3Xal5eXbzFc7SudeyA72LlU2V6ZpDpRCjGjQjBAMB0GA1UdDgQWBBS7sN6hWDOImqSKmd6+veuv2sskqzAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAKBggqhkjOPQQDAwNoADBlAjEAg+nBxBZeGl00GNnt7/RsDgBGS7jfskYRxQ/95nqMoaZrzsID1Jz1k8Z0uGrfqiMVAjBtZooQytQN1E/NjUM+tIpjpTNu423aF7dkH8hTJvmIYnQ5Cxdby1GoDOgYA+eisigAADGB/jCB+wIBATCBkDB8MTAwLgYDVQQDDCdBcHBsZSBBcHBsaWNhdGlvbiBJbnRlZ3JhdGlvbiBDQSA1IC0gRzExJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUwIQQgTTLU5jzN+/g+uYr1V2MTANBglghkgBZQMEAgEFADAKBggqhkjOPQQDAgRIMEYCIQCMlY6G69M3ajlk59jBVzCTX+Q0km5pWtfdgOUE42LsZwIhAKuj1SVAaHR0Fo5vPrvFZ4A5ADGEosGpkcs9yPwO4ho+AAAAAAAAaGF1dGhEYXRhWKQlxgj3EtuvurynCL6AgT2U5+l8y/6qyc/UJoOz9pnR+UAAAAAAYXBwYXR0ZXN0ZGV2ZWxvcAAg0ylZlqlzgHoapVpTd5ZbO9dUGIUe0GBLMHuSCW5IPOKlAQIDJiABIVggv6t6ltT51NPixgqaDTyjHUgXKhdktLaCbIdYa14v9BciWCAEXA4m56gfnwJLwQEOokp+l02UV6zCkXUkbSRoU46oag==";

        let challenge_b64 = BASE64_STANDARD.encode(challenge_str.as_bytes());

        let body = VerifyAttestation {
            app_id: app_id.to_string(),
            key_id: key_id_str.to_string(),
            challenge: Binary::from_base64(challenge_b64.as_str()).unwrap(),
            cbor_data: Binary::from_base64(cbor_str).unwrap(),
            dev_env: Some(true)
        };

        let query_msg = QueryMsg::VerifyAttestation(body);

        let verification_respose: Result<bool, CwEnvError> = app_attest_verifier_base.query(&query_msg);
        assert!(verification_respose.is_ok());
    }
}